<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="0xcccccc">
	<mx:Script>
		<![CDATA[
			import org.p25366.y2008.business.Delegate;
			import org.p25366.y2008.vo.SubkeyVO;
			import org.p25366.y2008.vo.KeyVO;
			import mx.rpc.xml.SimpleXMLDecoder;
		
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.managers.CursorManager;
			import org.p25366.y2008.model.Model;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.http.HTTPService;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			import org.p25366.y2008.vo.WordsVO;

			[Bindable]
			private var model:Model = Model.getInstance();
				
			[Bindable]
			private var _word:String;
			
			[Bindable]
			private var wordsData:ArrayCollection;
			[Bindable]
			private var markData:ArrayCollection;
			
			private var delegate:Delegate = new Delegate();

			
			public function set word(value:String):void
			{
				_word = value;
				search(_word);
			}
			public function get word():String
			{
				return _word;
			}
			private function search(word:String):void
			{
			}
			
			private function onItemSelected(event : Event ) :void 
			{
				//Alert.show(event.target.toString());
				//model.keyVO
			}
			
			private function onWordSelected(event : Event ): void {
				this.visible = false;
				Model.getInstance().keyVO = Model.getInstance().keys.getItemAt(event.target.selectedItem.themeId-1) as KeyVO;
				delegate.loadSubkeys(Model.getInstance().keyVO);
				Model.getInstance().subkeyVO = Model.getInstance().keyVO.children.getItemAt(event.target.selectedItem.subthemeId as Number) as SubkeyVO;
				Model.getInstance().subkeyVO.keyVO = Model.getInstance().keyVO;
				delegate.loadWords(Model.getInstance().subkeyVO);
				Model.getInstance().wordVO = Model.getInstance().subkeyVO.children.getItemAt(event.target.selectedItem.id as Number) as WordsVO;
				Model.getInstance().page = Model.getInstance().SOUSPAGE_EXPLORATEUR_THEMES;
				
				/** 
				 * Voir avec thierry pour les event.target.selectedItem.themeId et subthemeId
				 * Anthony
				 */
			}
			
			private function resultHandler(event:ResultEvent):void
			{
				wordsData = new ArrayCollection();
				markData = new ArrayCollection();			        
				var one_word:WordsVO;
				//var one_mark:M;
				
				var itemVO:Object;
		
				var xmlStr:String = event.result.toString();
      		  	var xmlDoc:XMLDocument = new XMLDocument(xmlStr);
      		 	var decoder:SimpleXMLDecoder = new SimpleXMLDecoder(true);
        		var xmlObj:Object = decoder.decodeXML(xmlDoc);
        		// Il faut rajouter .results.result >>> .word , car il faut differencier les WORDS et HISTORICAL
        			for each(itemVO in xmlObj.results.word){
						wordsData.addItem((new WordsVO(itemVO)));
					}

			//	for each(var historicResult:XML in (event.result.historicResults).elements()){
						
				//}
				//for each(var result:XML in (event.result as XML).elements()) {
				//for each (var ling:XML in (event.result.data.linguisticResults as XML).elements()){
				//Alert.show(ling.toString());
					
					/** 
					 * Génère des VO, stocke les dans le modèle
					 * Arnaud
					 */
					 
					/* if(result.type=="word")
					{
						word_result = new Object();
						
					}
					else{
					one_result = new KeyVO();
					one_result.date = result.date;
					one_result.description = result.description;
					one_result.num = result.num;
					
					listData.addItem(one_result);
					}
				}*/
			}
			private function faultHandler(event:FaultEvent):void
			{
			}
			public function confirmHandler(event: CloseEvent): void
			{
			}
			private function completeHandler(evt:Event):void
			{
				trace (evt.target.data);
			}
			public function recherche(): void
			{
				test_service.send();
			}
			
			public function clickHandler(evt:MouseEvent):void {
				
			}
		/* au clic sur un mot (Onclick) : modele.keyVO = au keyVo du mot selectionné.
		modele.subKeyVo = subkeyVo du mot selectionné,modele.subkeyVo.keyVO = modele.KeyVO;
		modele.wordVo = mot.
		*/
		]]>
		
	</mx:Script>
	<mx:HTTPService
		id="test_service"
		resultFormat="e4x"
		method="GET"
		showBusyCursor="true" 
		result="resultHandler(event)" 
		fault="faultHandler(event)"  
		url= "{model.data+'?action=search&amp;q='+_word}"
		/>
	<mx:VBox>
		
		<mx:Text  text="Résultat de la recherche pour {_word}" width="250" paddingBottom="20">
			<!--<mx:htmlText>
				<![CDATA[
					Résultat de la recherche pour <b>{_word}</b>
				]]>
			</mx:htmlText>-->
		</mx:Text>
		<mx:HBox paddingLeft="6" paddingRight="-25" paddingBottom="5" >
		<mx:VBox>
			<mx:Text text="Repères linguistiques" />
				<mx:List dataProvider="{wordsData}" useHandCursor="true" itemClick="onWordSelected(event)" cornerRadius="10">
						<mx:itemRenderer>
							<mx:Component>
								<mx:VBox height="70">
									<mx:Text text="{data.libSrc}" width="120"/>
									<mx:Text text="{data.id}" textAlign="left"/>
								</mx:VBox>
							</mx:Component>
						</mx:itemRenderer>		
				</mx:List>
			</mx:VBox>
			<mx:VBox>
			<mx:Text text="Repères chronologiques" />
				<mx:List dataProvider="" click="onItemSelected(event)" cornerRadius="10">
						<mx:itemRenderer >
							<mx:Component>
								<mx:VBox height="70" >
									<mx:Text text="{data.date}" width="120"/>
									<mx:Text text="{data.num}"  />
								</mx:VBox>
							</mx:Component>
						</mx:itemRenderer>
				</mx:List>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
</mx:Canvas>

